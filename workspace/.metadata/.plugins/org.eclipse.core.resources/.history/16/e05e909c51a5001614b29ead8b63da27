/*
 * sample.h
 *
 *  Created on: 4 Nov 2016
 *      Author: GeorgeQuentin
 */

#ifndef SAMPLE_H_
#define SAMPLE_H_

#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>

using namespace std;
//
//class Sample {
//private:
//	int input;
//	const int N { 100 };
//	vector <long double> y;
//
//
//public:
//
//	Sample();
//
//	Sample(vector<long double> y);
//
//	//Sample(const Sample &other)= default;//copy constructor
//	Sample(const Sample &other);
//
//	Sample(Sample &&other);//move copy constructor
//
//	//Sample &operator=(const Sample &other)= default;//assigment operator to default
//	Sample &operator=(const Sample &other);//assignment constructor
//
//	Sample &operator=(Sample &&other);//move assignment operator
//
//
//	int get_N();
//	int get_size();
//	void set_data(vector<long double> y);
//	vector<long double> get_data();
//	long double find_data(int value);
//	long double minimum();
//	long double maximum();
//	long double range();
//	long double midRange();
//	long double sum();
//	long double mean();
//	long double median();
//	long double mode();
//	long double variance();
//	long double std_deviation();
//	void sort();//ascending order
//	long double calculateAverage(const long double &a, const long double &b);
//
//
//	Sample print();
//	void normalPrint();
//
//	virtual ~Sample();
//
//	// the put to (<<) operator, so you can use objects of this class with cout
//	friend ostream &operator<<(ostream &out, const Sample &test);
//	friend istream &operator>>(istream &in, const Sample &sample);
//
//
//};

template<typename T>
class Samplet {
private:
	int input;
	const int N { 100 };
	vector <T> y;


public:

	Samplet();

	Samplet(vector<T> y);

	Samplet(const Samplet &other);

	Samplet(Samplet &&other);

	Samplet &operator=(const Samplet &other);//assignment constructor

	Samplet &operator=(Samplet &&other);//move assignment operator

	int get_N();
	int get_size();
	void set_data(vector<T> y);
	vector<T> get_data();
	T find_data(int value);
	T minimum();
	T maximum();
	T range();
	T midRange();
	T sum();
	T mean();
	T median();
	T mode();
	T variance();
	T std_deviation();
	void sort();//ascending order
	T calculateAverage(const T &a, const T &b);


	Samplet print();
	void normalPrint();

	virtual ~Samplet();

	// the put to (<<) operator, so you can use objects of this class with cout
	friend ostream &operator<<(ostream &out, const Samplet &test);
	friend istream &operator>>(istream &in, const Samplet &sample);

	class iterator;
//	iterator begin(){
//		return iterator(0, *this);
//	}
//	iterator end(){
//		return iterator(m_size, *this);
//	}

};


template<typename T>
class Samplet<T>::iterator {

private:
	unsigned int pos;
	Samplet &m_samplet;

public:
	iterator(unsigned int pos, Samplet &s): pos(pos), m_samplet(s){

	}

	iterator &operator++() //prefix operator implementation
	{
		pos++;
		return *this;
	}
	iterator &operator++(int)//postfix operator implementation
	{
		pos++;
		return *this;
	}

	bool operator!=(const iterator &other) const//not equal operator implementation
	{
		return (pos != other.pos);
	}

	bool operator==(const iterator &other) const//equals operator implementation
	{
		return pos == other.pos;
	}

	T &operator*(){
		return m_samplet.get(pos);
	}



};


#endif /* SAMPLE_H_ */
