//#include <iostream>
#include <limits>

#include "sample.h"
#include "samplet.h"
#include "samplet.cc"

using namespace std;


int stringToInt(string str) {

	const char* characters = str.c_str();

	int value = 0;
	for (int i = 0; i < strlen(characters); i++) {
		value = value + (int) characters[i];
	}

	return value;
}

int main(int argc, char *argv[]) {

	sample a_sample;
	//samplet<long double> a_sample;
	//samplet<double> a_sample;
	//samplet<float> a_sample;
	//samplet<int> a_sample;


	//<6: 7 11 2 13 3 5 >
//	string special_str = "<2: 1.18973e+4932 1.18973e+4932 >";
//	string text_file_name = "cwk-input01.txt";
//	fstream outFile;
//	outFile.open(text_file_name, ios::out);
//
//	cout << "The output is also written in ---> " << text_file_name << endl << endl;
//
//	 while (cin >> a_sample){
//
//		 //this code for testing sample file and writing the result into a text file
//		 a_sample.test(a_sample, text_file_name, outFile);
//
//		 outFile.close();
//	 }
//	 if (cin.bad())
//		 cerr << "\nBad input\n\n";





//	vector<long double> v;
	const int max = std::numeric_limits<int>::max();
//
//	char ch[max];
//	cin.get(ch, max);
//	cin.clear();
//	cout << ch << endl;
	char *ch ;
	cin.get(ch, max);
	cin.clear();
	cout << ch << endl;

//
////	double input;
////	while (cin >> input){
////	cout << input << endl;
////	}
//
//	//cout << cin.gcount() << endl;
//	//cout << strlen(ch) << endl;
//
//
//	bool colon_mark = false;
//	string sizeString;
//	string valuesString;
//
//	for (int i = 0; i < strlen(ch); i++) {
//
//		if (ch[i] == '<' || ch[i] == '>') {
//			ch[i] = ' ';
//		} else if (ch[i] == ':') {
//			colon_mark = true;
//		} else {
//
//			if (colon_mark == true) {
//				valuesString.push_back(ch[i]);
//			} else {
//				sizeString.push_back(ch[i]);
//			}
//		}
//	}
//
//	cout << sizeString << endl;
//	cout << valuesString << endl;
//
//	unsigned int tempInt;
//	stringstream sizeStream(sizeString);
//	sizeStream >> tempInt;
//
//	stringstream sStream(valuesString);
//	long double tempDouble;
//	while (sStream >> tempDouble) {
//		v.push_back(tempDouble);
//	}
//
//	for (vector<long double>::iterator it = v.begin(); it != v.end(); it++) {
//
//		cout << *it << endl;
//
//	}






	return 0;
}
