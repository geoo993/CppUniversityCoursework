/*
 * samplet.cpp
 *
 *  Created on: 8 Nov 2016
 *      Author: GeorgeQuentin
 */

#include "samplet.h"



T Samplet::find_data(int index) {

	if (index < get_size()) {
		return y[index];
	} else {
		return T();//0;
	}
}

T Samplet::minimum() {

	T smallest = get_N();

	if (get_size() <= 0) {
		return T();//0;
	} else {
		if (y.begin() == y.end()) {
			//cout << "vector is empty " << endl;

			smallest = *(y.end());
			return smallest;

		} else {

			for (vector<T>::iterator it = y.begin(); it != y.end(); it++) {

				if (*it < smallest) {
					smallest = *it;
				}
			}

			return smallest;
		}
	}

}


T Samplet::maximum() {

	T largest = 0;

	if (get_size() <= 0) {
		return T();//0;
	} else {

		if (y.begin() == y.end()) {
			cout << "vector is empty " << endl;

			largest = *(y.end());
			return largest;

		} else {

			for (vector<T>::iterator it = y.begin(); it != y.end(); it++) {

				if (*it > largest) {
					largest = *it;
				}
			}

		}

		return largest;
	}

}


T Samplet::range() {

	if (get_size() > 0) {
		return maximum() - minimum();
	} else {
		return T();//0;
	}

}

T Samplet::midRange() {

	if (get_size() > 0) {
		return (maximum() + minimum()) / 2.0;
	} else {
		return T();
	}

}

T Samplet::sum() {

	T result = 0;

	if (get_size() > 0) {

		for (vector<T>::iterator it = y.begin(); it != y.end(); it++) {
			result = result + *it;
			//result += *it;
		}

		return result;

	} else {
		return T();
	}
}

T Samplet::mean() {//also known as average

	if (get_size() > 0) {
		return sum() / get_size();
	} else {
		return T();
	}

}

T Samplet::mode() {

	if (get_size() > 0) {

		T number = *(y.begin());
		T mode = number;

		int count = 1;
		int countMode = 1;

		for (int i = 1; i < get_size(); i++) {
			if (number == y[i]) {
				count++;
			} else {
				if (count > countMode) {
					countMode = count;
					mode = number;
				}
				count = 1;
				number = y[i];
			}
		}

		return mode;
	} else {
		return T();//0
	}
}

T Samplet::variance() {

	if (get_size() > 0) {

		T result = 0;

		for (vector<T>::iterator it = y.begin(); it != y.end(); it++) {
			result = result + pow(*it - mean(), 2.0);
		}

		return (result / get_size());//or result/(get_size()-1)

	} else {
		return T();
	}
}


T Samplet::median() {
	if (get_size() > 0) {

		sort();

		int index = 0;

		if (get_size() % 2 == 0) {
			index = int(get_size() / 2.0);
			//cout << index << " is even    ";
			return calculateAverage(y[index - 1], y[index]);

		} else {
			index = int(get_size() / 2.0) + 1;
			//cout <<  index << " is odd.";
			return y[index - 1];
		}

	} else {
		return T();//0
	}

}


