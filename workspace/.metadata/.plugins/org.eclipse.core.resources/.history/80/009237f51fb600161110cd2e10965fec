#include <iostream>
#include <fstream>//file stream
//#include "samplet.h"
//#include "samplet.cc"

#include "sample.h"
#include <vector>
#include <initializer_list>

using namespace std;


class MyClass {
private:
    //int _i; // our data
    vector <long double> y;
public:
    // default constructor
    //MyClass() : _i(0) { cout << "default constructor"; }
    MyClass() : y({}) { cout << "default constructor"; }

    // constructor that takes an int
    //MyClass(int i) : _i(i) { cout << "int constructor"; }
    MyClass(vector <long double> v) : y(v) { cout << "int constructor"; }

    MyClass(const initializer_list<long double>& il)
    {
    	for (int i = 0; i < il.size(); i++)
    	{
    		y.push_back(i);

    		cout << il << endl;
    	}


    	for (vector<long double>::iterator it = y.begin(); it != y.end(); it++) {


    	}

    }

};



int main(int argc, char *argv[]) {
	/* an empty sample object - initialise with a vector once
	 * you have defined the sample constructor that takes a
	 * vector
	 */
	//	sample a_sample;
	//
	//	cout << "Before city_test()\n";
	//	city_test(a_sample);
	//	cout << "After city_test()\n";

	//vector <long double> v = {3, 4.1};
	MyClass c = {3, 4.1};


	/*
	//samplet<int> s;
	//samplet<double> s;
	//samplet<float> s;

	//sample s = {22, 12, 2.9, 1.8};

	string outputFile = "cwk-input01.txt";

	fstream outFile;
	outFile.open(outputFile, ios::out);

	if (outFile.is_open()) {

		while (cin >> s)

			//2
			outFile << s << endl

			//3
					<< "Size: " << s.get_size() << endl

			//4
					<< "Smallest number: " << s.minimum() << endl

			//5
					<< "Largest number: " << s.maximum() << endl

			//6
					<< "Range: " << s.range() << endl

			//7
					<< "Mid-Range: " << s.midrange() << endl

			//11
					<< "Median: " << s.median() << endl

			//8
					<< "Sum: " << s.sum() << endl

			<< "Mean: " << s.mean() << endl

			//9
					<< "Variance: " << s.variance() << endl

			<< "Mode: " << s.mode() << endl

			//10
					<< "Standard Deviation: " << s.std_deviation() << endl << endl;

		if (cin.bad())
			cerr << "\nBad input\n\n";

		outFile.close();

	} else { cerr << "Could not create file " << outputFile << endl; }

*/
	return 0;
}

