/*
 * samplet.cpp
 *
 *  Created on: 27 Nov 2016
 *      Author: GeorgeQuentin
 */

#include "samplet.h"

template<typename T>
void swapping(T& t1, T& t2) {
	T tmp(t1); // duplicate t1, making an expensive copy of each element
	t1 = t2; // discard the original contents of t1,
	// and replace them with an expensive duplicate of t2
	t2 = tmp; // discard the original contents of t2,
	// and replace them with an expensive duplicate of tmp
} // implicitly destroy the expensive temporary copy of t1

template<typename T>
samplet<T>::samplet() {
	y.resize(N);
}

template<typename T>
samplet<T>::samplet(vector<T> y) {
	this -> y.resize(N);
	this -> y = y;

}

template<typename T>
samplet<T>::samplet(const samplet &other) {
	this -> y = other.y;
}

template<typename T>
samplet<T>::samplet(samplet &&other) {
	this -> y = other.y;
}

template<typename T>
samplet<T> &samplet<T>::operator=(const samplet<T> &other) {
	y = other.y;
	return *this;
}

template<typename T>
samplet<T> &samplet<T>::operator=(samplet<T> &&other) {
	this -> y = other.y;

	return *this;
}

template<typename T>
T &samplet<T>::operator[](const unsigned int index) // for non-const objects: can be used for assignment
{
	assert(index >= 0 && index < get_size());
	return this -> y[index];

}

template<typename T>
const T &samplet<T>::operator[](const unsigned int index) const // for const objects: can only be used for access
{
	assert(index >= 0 && index < get_size());
	return this -> y[index];
}

template<typename T>
void samplet<T>::operator[](vector<T> y) {
	this -> y = y;
}

template<typename T>
int samplet<T>::get_N() const {
	return this->N;
}

template<typename T>
void samplet<T>::set_data(vector<T> y) {
	this->y = y;
}

template<typename T>
vector<T> samplet<T>::get_data() const {
	return y;
}

template<typename T>
void samplet<T>::sort() {
	::sort(y.begin(), y.end());
}

template<typename T>
unsigned int samplet<T>::get_size() const {
	return y.size();
}

template<typename T>
T samplet<T>::find_data(int index) {

	if (index < get_size()) {
		return y[index];
	} else {
		return T();
	}
}

template<typename T>
void samplet<T>::insert_data(T value) {
	y.push_back(value);
}

