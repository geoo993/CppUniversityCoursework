/*
 * samplet.h
 *
 *  Created on: 8 Nov 2016
 *      Author: GeorgeQuentin
 */

#ifndef SAMPLET_H_
#define SAMPLET_H_

#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include <sstream>
#include <cassert>

using namespace std;

template<typename T>
class samplet {

private:
	const int N { 6 };
	vector<T> y;

public:

	samplet();

	samplet(vector<T> y);

	samplet(const samplet &other);

	samplet(samplet &&other);

	samplet &operator=(const samplet &other);

	samplet &operator=(samplet &&other);

		friend bool operator== (const samplet &l, const samplet &r){
			return l.get_size() == r.get_size();
		}

		friend bool operator!= (const samplet &l, const samplet &r) {
			return !(l.get_size() == r.get_size());
		}

		friend bool operator> (const samplet &l, const samplet &r) {
			return l.get_size() > r.get_size();
		}

		friend bool operator>= (const samplet &l, const samplet &r)
		{
			return l.get_size() >= r.get_size();
		}

		friend bool operator< (const samplet &l, const samplet &r) {
			return l.get_size() < r.get_size(); // keep the same order
		}

		friend bool operator<= (const samplet &l, const samplet &r) {
			return l.get_size() <= r.get_size();
		}

		T &operator[](const unsigned index); // for non-const objects: can be used for assignment

		const T &operator[](const unsigned index) const; // for const objects: can only be used for access


		void operator[] (vector<T> y);

		int get_N() const;

		void set_data(vector<T> y);

		vector<T> get_data() const;

		void sort();

		unsigned int get_size() const;

		T find_data(int index);

		void insert_data(T value);


//		T minimum() {
//
//			T smallest = get_N();
//
//			if (get_size() <= 0) {
//				return T();
//			} else {
//				if (y.begin() == y.end()) {
//					//cout << "vector is empty " << endl;
//
//					smallest = *(y.end());
//					return smallest;
//
//				} else {
//
//					for (auto it = y.begin(); it != y.end(); it++) {
//
//						if (*it < smallest) {
//							smallest = *it;
//						}
//					}
//
//					return smallest;
//				}
//			}
//
//		}
//
//		T maximum() {
//
//			T largest = 0;
//
//			if (get_size() <= 0) {
//				return T();
//			} else {
//
//				if (y.begin() == y.end()) {
//					cout << "vector is empty " << endl;
//
//					largest = *(y.end());
//					return largest;
//
//				} else {
//
//					for (auto it = y.begin(); it != y.end(); it++) {
//
//						if (*it > largest) {
//							largest = *it;
//						}
//					}
//
//				}
//
//				return largest;
//			}
//
//		}
//
//		T range() {
//
//			if (get_size() > 0) {
//				return maximum() - minimum();
//			} else {
//				return T();
//			}
//
//		}
//
//		T midrange() {
//
//			if (get_size() > 0) {
//				return (maximum() + minimum()) / 2.0;
//			} else {
//				return T();
//			}
//
//		}
//
//		T sum() {
//
//			T result = 0;
//
//			if (get_size() > 0) {
//
//				for (auto it = y.begin(); it != y.end(); it++) {
//					result = result + *it;
//					//result += *it;
//				}
//
//				return result;
//
//			} else {
//				return T();
//			}
//		}
//
//		T mean() {//also known as average
//
//			if (get_size() > 0) {
//				return sum() / get_size();
//			} else {
//				return T();
//			}
//
//		}
//
//		T mode() {
//
//			if (get_size() > 0) {
//
//				T number = *(y.begin());
//				T mode = number;
//
//				int count = 1;
//				int countMode = 1;
//
//				for (int i = 1; i < get_size(); i++) {
//					if (number == y[i]) {
//						count++;
//					} else {
//						if (count > countMode) {
//							countMode = count;
//							mode = number;
//						}
//						count = 1;
//						number = y[i];
//					}
//				}
//
//				return mode;
//			} else {
//				return T();
//			}
//		}
//
//		T median() {
//			if (get_size() > 0) {
//
//				sort();
//
//				int index = 0;
//
//				if (get_size() % 2 == 0) {
//					index = int(get_size() / 2.0);
//					//cout << index << " is even    ";
//					return calculateAverage(y[index - 1], y[index]);
//
//				} else {
//					index = int(get_size() / 2.0) + 1;
//					//cout <<  index << " is odd.";
//					return y[index - 1];
//				}
//
//			} else {
//				return T();
//			}
//
//		}
//
//		T variance() {
//
//			if (get_size() > 0) {
//
//				T result = 0;
//
//				for (auto it = y.begin(); it != y.end(); it++) {
//					result = result + pow(*it - mean(), 2.0);
//				}
//
//				return (result / get_size());//or result/(get_size()-1)
//
//			} else {
//				return T();
//			}
//		}
//
//		T std_deviation() {
//			return sqrt(variance());
//		}
//
//		T calculateAverage(const T &a, const T &b) {
//
//			return (a + b) / 2.0;
//		}
//
//		void remove_unwanted_characters(string &str) {
//
//			string fstring;
//			for (string::iterator it = str.begin(); it != str.end(); ++it) {
//
//				if (isdigit(*it)) {
//					fstring.push_back(*it);
//				} else if (*it == ' ') {
//					fstring.push_back(*it);
//				}
//
//				//		if (!isdigit(*it)) {
//				//			replace(str.begin(), str.end(), *it, ' ');
//				//		}
//
//			}
//			str = fstring;
//			//cout << str << " " << fstring << "\n";
//
//		}
//
//		void print() {
//
//			cout << *this << endl;
//
//			cout << "<" << y.size() << ": " << flush;
//
//			for (int i = 0; i < y.size(); i++) {
//				cout << y[i] << " " << flush;
//			}
//
//			cout << ">" << endl;
//
//		}
//
//		~Samplet() {
//			//cout << "Destructor " << endl;
//		}
//
//		friend ostream &operator<<(ostream &out, const Samplet &test) {
//			out << "Sample to an output stream, using ostream << Operator Overloading of Sample" << endl;
//
//			return out;
//		}
//
//		friend istream &operator>>(istream &in, Samplet &sample) {
//
//			sample.y.clear();
//
//			string str;
//			cout << "Please Enter " << sample.get_N() << " Values in Template Vector >" << flush;
//
//			getline(cin, str);
//
//			//sample.remove_unwanted_characters(str);
//			stringstream sStream(str);
//			T tempDouble;
//
//			while (sStream >> tempDouble)
//			sample.insert_data(tempDouble);
//
//			return in;
//		}
//
//		class iterator;
//
//		iterator begin() {
//			return iterator(0, *this);
//		}
//		iterator end() {
//			return iterator(get_size(), *this);
//		}

	};

//
//
//template<typename T>
//class Samplet<T>::iterator {
//
//private:
//	unsigned int pos;
//	Samplet &m_samplet;
//
//public:
//	iterator(unsigned int pos, Samplet &s) :
//		pos(pos), m_samplet(s) {
//
//	}
//
//	iterator &operator++() //prefix operator implementation
//	{
//		pos++;
//		return *this;
//	}
//	iterator &operator++(int)//postfix operator implementation
//	{
//		pos++;
//		return *this;
//	}
//
//	bool operator!=(const iterator &other) const//not equal operator implementation
//	{
//		return (pos != other.pos);
//	}
//
//	bool operator==(const iterator &other) const//equals operator implementation
//	{
//		return pos == other.pos;
//	}
//
//	T &operator*() {
//		return m_samplet.get(pos);
//	}
//
//};

#endif /* SAMPLET_H_ */
