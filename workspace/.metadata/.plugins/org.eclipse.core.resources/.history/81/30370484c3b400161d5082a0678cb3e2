/*
 * samplet.cpp
 *
 *  Created on: 27 Nov 2016
 *      Author: GeorgeQuentin
 */

#include "samplet.h"


template <typename T>
samplet<T>::samplet()
{
	y.resize(N);
}

template <typename T>
samplet<T>::samplet(vector<T> y) {
	this -> y.resize(N);
	this -> y = y;

}

template <typename T>
samplet<T>::samplet(const samplet &other) {
	this -> y = other.y;
}

template <typename T>
samplet<T>::samplet(samplet &&other) {
	this -> y = other.y;
}

//template <typename T>
//samplet &samplet<T>::operator=(const samplet &other) {
//	y = other.y;
//	return *this;
//}


//template<typename T>
//samplet &samplet<T>::operator=(samplet &&other) {
//	this -> y = other.y;
//
//	return *this;
//}
//
//template <typename T>
//bool operator== (const samplet &l, const samplet &r) {
//	return l.get_size() == r.get_size();
//}



template<typename T>
void samplet<T>::set_data(vector<T> y)
{
	this->y = y;
}

template<typename T>
vector<T> samplet<T>::get_data() const
{
	return y;
}

template<typename T>
void samplet<T>::sort()
{
	::sort(y.begin(), y.end());
}

template<typename T>
unsigned int samplet<T>::get_size() const
{
	return y.size();
}

template<typename T>
T samplet<T>::find_data(int index) {

	if (index < get_size()) {
		return y[index];
	} else {
		return T();
	}
}

template<typename T>
void samplet<T>::insert_data(T value)
{
	y.push_back(value);
}


template<typename T>
samplet<T>::~samplet() {
	// TODO Auto-generated destructor stub
}

